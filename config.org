# -*- mode: org; coding: utf-8; -*-
#+TITLE:  Emacs 26 Configuration
#+AUTHOR: vasy
#+STARTUP: indent
* Configuration
** Package Management
   :PROPERTIES:
   :CUSTOM_ID: package-management
   :END:
   
   #+begin_src emacs-lisp
     (setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")
                              ("melpa" . "https://melpa.org/packages/")
                              ("org" . "https://orgmode.org/elpa/")))

     (setq load-prefer-newer t)

     (package-initialize)
     
     (add-to-list 'exec-path "~/.nix-profile/bin")

     (when (not package-archive-contents)
       (package-refresh-contents))

     (unless (package-installed-p 'use-package)
       (package-install 'use-package))

     (eval-when-compile
       (require 'use-package))

   #+end_src
** Startup
*** Garbage collector threshold

    This fixed garbage collect, makes emacs start up faster
    #+begin_src emacs-lisp
    (setq gc-cons-threshold 402653184
      gc-cons-percentage 0.6)

    (defvar startup/file-name-handler-alist file-name-handler-alist)
    (setq file-name-handler-alist nil)

    (defun startup/revert-file-name-handler-alist ()
    (setq file-name-handler-alist startup/file-name-handler-alist))

    (defun startup/reset-gc ()
    (setq gc-cons-threshold 16777216
        gc-cons-percentage 0.1))

    (add-hook 'emacs-startup-hook 'startup/revert-file-name-handler-alist)
    (add-hook 'emacs-startup-hook 'startup/reset-gc)
    #+end_src
** UI and options
*** Font

Font selection
#+BEGIN_SRC 
(if (window-system)
    (set-frame-font "Monospace 11"))
#+END_SRC


#+BEGIN_SRC 

#+END_SRC
*** Pretty
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t
      inhibit-startup-message t
      inhibit-startup-echo-area-message t)
(menu-bar-mode -1)
(tool-bar-mode -1)
(when (boundp 'scroll-bar-mode)
  (scroll-bar-mode -1))
(mouse-wheel-mode t)
(setq custom-safe-themes t)
(if (window-system)
    (set-frame-font "Monospace 11"))
(blink-cursor-mode -1)
(setq ring-bell-function 'ignore)
(setq redisplay-dont-pause t
      scroll-margin 1
      scroll-step 1
      scroll-conservatively 100
      scroll-preserve-screen-position 1
      jit-lock-defer-time 0.05
      font-lock-support-mode 'jit-lock-mode)
(setq-default scroll-up-aggressively 0.01 scroll-down-aggressively 0.01)
(global-visual-line-mode)
(add-hook 'after-init-hook 'global-whitespace-mode)
(setq whitespace-style (list 'space-mark 'tab-mark))
(global-hl-line-mode +1)
(global-linum-mode)
#+END_SRC
*** Server start
#+BEGIN_SRC emacs-lisp
(server-start)
#+END_SRC
*** Useful defaults
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
(defalias 'yes-or-no-p 'y-or-n-p)
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq tab-always-indent 'complete)
(setq-default indicate-empty-lines t)
(setq require-final-newline t)
(setq sentence-end-double-space nil)
(delete-selection-mode t)
(setq show-paren-delay 0)
(show-paren-mode t)
(column-number-mode t)
(setq uniquify-buffer-name-style 'forward)
(global-auto-revert-mode t)
(windmove-default-keybindings)
(recentf-mode 1)
(setq recentf-max-menu-items 15
      recentf-max-saved-items 50
      recentf-auto-cleanup 'never)
(global-set-key "\C-x\ \C-r" 'recentf-open-files)
(setq sentence-end-double-space nil)
(setq-default word-wrap t)
(setq truncate-partial-width-windows t)
(winner-mode 1)
(save-place-mode 1)
(setq large-file-warning-threshold 100000000)
(global-unset-key (kbd "C-z"))
#+END_SRC
*** Theme
#+BEGIN_SRC emacs-lisp
(use-package inkpot-theme
:ensure t
:config
(load-theme 'inkpot t))
(custom-theme-set-faces
 'inkpot
 '(linum ((t (:background "#2e2e2e" :foreground "#8b8bcd"))))
 '(show-paren-match ((t (:underline t :background "#4e4e8f"))))
 '(show-paren-match-face ((t (:underline nil :background "#4e4e8f"))))
 '(font-lock-string-face ((t (:foreground "#ffcd8b"))))
 '(font-lock-comment-face ((t (:italic t :foreground "#d8d8d8"))))
 '(font-lock-comment-delimiter-face ((t (:italic t :foreground "#d8d8d8"))))

 ;; white-space
 '(whitespace-trailing ((nil (:background "#343443" :foreground nil))))
 '(whitespace-space ((nil (:background nil :foreground "#fcfcfc"))))
 '(whitespace-tab ((nil (:background nil :foreground "#fcfcfc"))))
 
 ;; isearch
 '(isearch ((t (:bold t :foreground "#303030" :background "#ad7b57"))))
 '(lazy-highlight ((t  (:foreground "#303030" :background "#ad7b57"))))
'(isearch-fail ((t (:foreground "#ffffff" :background "#ce4e4e")))))
#+END_SRC
*** Modeline
#+BEGIN_SRC emacs-lisp
(use-package powerline
  :ensure t
  :config
  (powerline-center-theme))
(setq evil-default-cursor (quote (t "#750000"))
      evil-visual-state-cursor '("green" hollow)
      evil-normal-state-cursor '("green" box)
      evil-insert-state-cursor '("pink" (bar . 2)))
#+END_SRC
** Necesary packages
*** Org mode
#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t
      org-startup-folded 'content
      org-export-backends '(ascii html icalendar latex md odt)
      org-use-fast-tag-selection 'auto
      org-time-stamp-custom-formats '("<%a %e %b %Y>" . "<%a %e %b %Y %H:%M>")
      org-tags-column 0
      org-ellipsis "⤶")

(add-hook 'org-mode-hook 'turn-off-filladapt-mode)
(add-hook 'org-mode-hook 'visual-line-mode)
(add-hook 'org-mode-hook 'flyspell-mode)
(use-package org
  :ensure t
  :config
  ( progn
    (setq org-src-fontify-natively t)
    ( setq org-src-tab-acts-natively t )
    (setq org-time-clocksum-format
      (quote
       (:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t)))
    (setq org-pretty-entities t)
    (setq org-src-preserve-indentation t)
    (setq org-startup-folded nil)
    (setq org-src-tab-acts-natively t) ))
(use-package org-bullets
  :commands org-bullets-mode
  :init
  (add-hook 'org-mode-hook 'org-bullets-mode)
  (setq org-bullets-bullet-list '("◉" "○" "●" "►" "•")))
(use-package org-cliplink
  :ensure t
  :bind ("C-M-y" . org-cliplink))
#+END_SRC
*** Diminish
#+BEGIN_SRC emacs-lisp
(use-package diminish
  :ensure t
  :demand t
  :diminish (git-gutter-mode . "gg")
  :diminish (visual-line-mode . "ω")
  :diminish hs-minor-mode
  :diminish abbrev-mode
  :diminish auto-fill-function)
#+END_SRC
*** Which key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config
  (which-key-mode +1))
#+END_SRC
*** Vim mode
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :config
  (evil-mode 1)
  (define-key evil-normal-state-map (kbd "j") 'evil-next-visual-line)
  (define-key evil-normal-state-map (kbd "k") 'evil-previous-visual-line)
  (define-key evil-normal-state-map (kbd "RET") 'newline-without-break-of-line)
  (define-key evil-normal-state-map (kbd "C-h") 'evil-window-left)
  (define-key evil-normal-state-map (kbd "C-j") 'evil-window-down)
  (define-key evil-normal-state-map (kbd "C-k") 'evil-window-up)
  (define-key evil-normal-state-map (kbd "C-l") 'evil-window-right)
  (define-key evil-normal-state-map [escape] 'keyboard-quit)
  (define-key evil-visual-state-map [escape] 'keyboard-quit)
  (define-key minibuffer-local-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-ns-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-completion-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-must-match-map [escape] 'minibuffer-keyboard-quit)
  (define-key minibuffer-local-isearch-map [escape] 'minibuffer-keyboard-quit)
  (global-set-key [escape] 'keyboard-quit)
  (setq evil-shift-width 2)
  (setq evil-move-cursor-back nil))

(defun newline-without-break-of-line ()
  "1. move to end of the line,.2. insert newline with index"
  (interactive)
  (let ((oldpos (point)))
    (end-of-line)
    (newline-and-indent)))

(use-package evil-leader
  :ensure t
  :config
  (global-evil-leader-mode)
  (evil-leader/set-leader ",")
  (setq evil-leader/in-all-states 1)
  (evil-leader/set-key
    ","  (lambda () (interactive) (ansi-term (getenv "SHELL")))
    "m"  'neotree-toggle
    "n"  'neotree-project-dir
    "."  'switch-to-previous-buffer
    "/"  'evil-search-highlight-persist-remove-all
    "be" (lambda () (interactive) (bookmark-jump "emacs"))))

(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1))

(use-package evil-search-highlight-persist
  :ensure t
  :config
  (global-evil-search-highlight-persist t))

(use-package evil-matchit
  :ensure t
  :config
  (global-evil-matchit-mode t))

(defgroup evil-textobj-between nil
  "Text object between for Evil"
  :prefix "evil-textobj-between-"
  :group 'evil)

(defcustom evil-textobj-between-i-key "f"
  "Keys for evil-inner-between"
  :type 'string
  :group 'evil-textobj-between)
(defcustom evil-textobj-between-a-key "f"
  "Keys for evil-a-between"
  :type 'string
  :group 'evil-textobj-between)
#+END_SRC
*** Navigation
#+BEGIN_SRC emacs-lisp
(use-package dired-k
    :ensure t
    :config
  (progn
    (add-hook 'dired-initial-position-hook 'dired-k)))
(bind-keys
 :map dired-mode-map
 ("K" . dired-k)
 ("g" . dired-k))

  (use-package projectile
    :ensure t
    :defer t
    :config
    (projectile-global-mode))
  (setq projectile-mode-line
        '(:eval (format " [%s]" (projectile-project-name))))
  (setq projectile-remember-window-configs t)
  (setq projectile-completion-system 'ivy)
  
  (use-package flx
    :ensure t)

  (use-package ivy
    :ensure t
    :diminish ivy-mode
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-re-builders-alist
          '((t . ivy--regex-fuzzy)))
    (setq ivy-initial-inputs-alist nil)
    (setq enable-recursive-minibuffers t)
    (define-key ivy-minibuffer-map [escape] 'minibuffer-keyboard-quit))

  (use-package neotree
    :ensure t
    )
#+END_SRC
*** Git
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)))

  (use-package diff-hl
    :ensure t
    :config
    (global-diff-hl-mode +1)
    (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
#+END_SRC
*** Custom el
Set up the customize file to its own separate file, instead of saving
customize settings in [[file:init.el][init.el]].
#+BEGIN_SRC emacs-lisp 
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC
