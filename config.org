#+PROPERTY: header-args :tangle yes
* Startup
#+BEGIN_SRC emacs-lisp
(defvar em/startup-time
  (current-time))
#+END_SRC

* Bootstrap
  #+BEGIN_SRC emacs-lisp
    (setq gc-cons-threshold 402653184
          gc-cons-percentage 0.6)
    (add-hook 'after-init-hook `(lambda ()
                                  (setq gc-cons-threshold 800000
                                        gc-cons-percentage 0.1)
                                  (garbage-collect)) t)

    (setq vc-follow-symlinks t
          find-file-visit-truename t)

    (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
    (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
    (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

    (defvar bootstrap-version)
    (let ((bootstrap-file
           (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
            (url-retrieve-synchronously
             "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
             'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))

    (setq-default use-package-always-defer t ; Always defer load package to speed up startup time
                  use-package-verbose nil ; Don't report loading details
                  use-package-expand-minimally t  ; make the expanded code as minimal as possible
                  use-package-enable-imenu-support t) ; Let imenu finds use-package definitions

    (straight-use-package 'use-package)
    (setq straight-use-package-by-default t)
  #+END_SRC

* Basic setup
  #+BEGIN_SRC emacs-lisp
    (setq my-sync-directory "~/Dropbox")
    (unbind-key "C-s")
  #+END_SRC

* Better defaults
  #+BEGIN_SRC emacs-lisp
    (setq-default
     user-mail-address "elsile69@yahoo.com"
     user-full-name "vasile luta"
     disabled-command-function nil
     inhibit-startup-message t
     inhibit-startup-echo-area-message t
     initial-scratch-message 'nil
     initial-major-mode 'fundamental-mode
     indent-tabs-mode nil
     tab-width 2
     sentence-end-double-space 'nil
     require-final-newline t
     auto-window-vscroll nil
     create-lockfiles nil
     delete-by-moving-to-trash t
     column-number-mode t
     truncate-lines t
     message-log-max 16384
     electric-indent-mode nil
     backup-directory-alist `(("." . ,(concat user-emacs-directory "backups")))
     frame-title-format '((:eval (if (buffer-file-name)
                                     (abbreviate-file-name (buffer-file-name))
                                   "%b")))
     large-file-warning-threshold 100000000
     make-backup-files nil
     scroll-conservatively 101
     ring-bell-function 'ignore
     mouse-wheel-scroll-amount '(1 ((shift) . 1))
     mouse-wheel-progressive-speed nil
     mouse-wheel-follow-mouse 't
     scroll-step 1
     )

    (set-frame-name "emacs")
    (fringe-mode '(1 . 3))
    (delete-selection-mode 1)
    (fset 'yes-or-no-p 'y-or-n-p)
    (set-clipboard-coding-system 'utf-16le-dos)
    (set-selection-coding-system 'utf-8)
    (setq x-select-enable-clipboard t)
    (blink-cursor-mode 0)

    (put 'narrow-to-region 'disabled nil)
    (put 'narrow-to-page 'disabled nil)
    (put 'narrow-to-defun 'disabled nil)
    (put 'upcase-region 'disabled nil)
    (put 'downcase-region 'disabled nil)

    (global-set-key (kbd "M-/") 'hippie-expand)
    (setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                             try-expand-dabbrev-all-buffers
                                             try-expand-dabbrev-from-kill
                                             try-complete-file-name-partially
                                             try-complete-file-name
                                             try-expand-all-abbrevs
                                             try-expand-list
                                             try-expand-line
                                             try-complete-lisp-symbol-partially
                                             try-complete-lisp-symbol))

    (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  #+END_SRC

* Diminish
  #+BEGIN_SRC emacs-lisp
    (use-package diminish :defer 3)
  #+END_SRC

* Org
  #+BEGIN_SRC emacs-lisp
    (straight-override-recipe '(org :type git :host github
                                    :repo "emacsmirror/org" :no-build t))
    (use-package org
      :diminish auto-fill-function
      :demand t
      :straight org-bullets
      :straight org-super-agenda
      :hook (org-mode . auto-fill-mode)
      :hook (org-mode . org-bullets-mode)
      :bind
      ("C-c a" . org-agenda)
      :config
      (progn
        (setq org-directory "~/org")
        (setq org-agenda-files
              (mapcar (lambda (path) (concat org-directory path))
                      '("/org.org"
                        "/gtd/gtd.org"
                        "/gtd/inbox.org"
                        "/gtd/tickler.org")))
        (setq org-log-done 'time)
        (setq org-src-fontify-natively t)
        (setq org-use-speed-commands t)
        (setq org-capture-templates
              '(("t" "Todo [inbox]" entry
                 (file+headline "~/org/gtd/inbox.org" "Tasks")
                 "* TODO %i%?")
                ("T" "Tickler" entry
                 (file+headline "~/org/gtd/tickler.org" "Tickler")
                 "* %i%? \n %^t")))
        (setq org-refile-targets
              '(("~/org/gtd/gtd.org" :maxlevel . 3)
                ("~/org/gtd/someday.org" :level . 1)
                ("~/org/gtd/tickler.org" :maxlevel . 2)))
        (setq org-todo-keywords '((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)")))
        (setq org-agenda-custom-commands
              '(("@" "Contexts"
                 ((tags-todo "@email"
                             ((org-agenda-overriding-header "Emails")))
                  (tags-todo "@phone"
                             ((org-agenda-overriding-header "Phone")))))))
        (setq org-clock-persist t)
        (org-clock-persistence-insinuate)
        (setq org-time-clocksum-format '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))))
    (setenv "BROWSER" "chromium-browser")
  #+END_SRC

* Saveplace
  #+BEGIN_SRC emacs-lisp
    (use-package saveplace
      :straight nil
      :defer 5
      :init
      (setq save-place-file (expand-file-name "saveplace" user-emacs-directory))
      (setq-default save-place t)
      (save-place-mode))
  #+END_SRC

* Uniquify
  #+BEGIN_SRC emacs-lisp
    (use-package uniquify
      ;; unique buffer names dependent on file name
      :straight nil
      :defer 5
      :config
      (setq
       ;; Rename buffers with same name
       uniquify-buffer-name-style 'forward
       uniquify-separator "/"
       ;; rename after killing uniquified
       uniquify-after-kill-buffer-p t
       ;; don't muck with special buffers
       uniquify-ignore-buffers-re "^\\*"))
  #+END_SRC

* Autorevert
  #+BEGIN_SRC emacs-lisp
    (use-package autorevert
      ;; revert buffers when files on disk change
      :defer 3
      :config
      (setq
       ;; Also auto refresh dired, but be quiet about it
       global-auto-revert-non-file-buffers t
       auto-revert-verbose nil
       ;; Revert pdf without asking
       revert-without-query '("\\.pdf"))
      (global-auto-revert-mode 1) ;; work with auto-save with Org files in Dropbox
      )
  #+END_SRC

* Recentf
  #+BEGIN_SRC emacs-lisp
    (use-package recentf
      :straight nil
      :hook (after-init . recentf-mode)
      :custom
      (recentf-max-saved-items 20000000)
      (recentf-auto-cleanup 'never)
      (recentf-exclude '((expand-file-name package-user-dir)
                         ".cache"
                         "cache"
                         "recentf"
                         "COMMIT_EDITMSG\\'"))
      :preface
      (defun ladicle/recentf-save-list-silence ()
        (interactive)
        (let ((message-log-max nil))
          (if (fboundp 'shut-up)
              (shut-up (recentf-save-list))
            (recentf-save-list)))
        (message ""))
      (defun ladicle/recentf-cleanup-silence ()
        (interactive)
        (let ((message-log-max nil))
          (if shutup-p
              (shut-up (recentf-cleanup))
            (recentf-cleanup)))
        (message ""))
      :hook
      (focus-out-hook . (ladicle/recentf-save-list-silence
                         ladicle/recentf-cleanup-silence)))
  #+END_SRC

* Ibuffer
  #+BEGIN_SRC emacs-lisp
    (use-package ibuffer
      ;; Better buffer management
      :defer 3
      :straight ibuffer-tramp
      :bind (("C-x C-b" . ibuffer)
             :map ibuffer-mode-map
             ("M-o"     . nil)) ;; unbind ibuffer-visit-buffer-1-window
      :config
      (add-hook 'ibuffer-hook
                (lambda ()
                  (ibuffer-tramp-set-filter-groups-by-tramp-connection)
                  (ibuffer-do-sort-by-alphabetic)))
      )
  #+END_SRC

* Ediff
  #+BEGIN_SRC emacs-lisp
    (use-package ediff
      :straight nil
      :config
      (setq ediff-window-setup-function 'ediff-setup-windows-plain)
      (setq-default ediff-highlight-all-diffs 'nil)
      (setq ediff-diff-options "-w"))
  #+END_SRC

* Highlight-line
  #+BEGIN_SRC emacs-lisp
    (use-package hl-line
      :straight nil
      :hook
      (after-init . global-hl-line-mode))
  #+END_SRC

* Parens
  #+BEGIN_SRC emacs-lisp
    (use-package paren
      :straight nil
      :hook
      (after-init . show-paren-mode)
      :custom-face
      (show-paren-match ((nil (:background "#44475a" :foreground "#f1fa8c"))))
      :custom
      (show-paren-style 'paranthesis)
      (show-paren-when-point-inside-paren t)
      (show-paren-when-point-in-periphery t))
  #+END_SRC

* Imenu
  #+BEGIN_SRC emacs-lisp
    (use-package imenu-list
      :bind
      ("<f10>" . imenu-list-smart-toggle)
      :custom-face
      (imenu-list-entry-face-1 ((t (:foreground "white"))))
      :custom
      (imenu-list-focus-after-activation t)
      (imenu-list-auto-resize t))
  #+END_SRC

* Vim mode
  #+BEGIN_SRC  emacs-lisp
    (use-package evil-leader
      :demand t
      :config
      (global-evil-leader-mode)
      (evil-leader/set-leader "<SPC>")
      (evil-leader/set-key
        "," 'other-window
        "." 'mode-line-other-buffer
        "b" 'counsel-switch-buffer
        "f" 'counsel-find-file
        "k" 'kill-this-buffer
        "w" 'save-buffer
        "x" 'evil-window-delete
        "e" 'eval-last-sexp
        "a" 'align-regexp
        "t" 'shell-pop
        "h" 'hydra-projectile/body
        ))

    (use-package evil
      :init
      (evil-mode)
      :config
      (mapc (lambda (m) (add-to-list 'evil-emacs-state-modes m t))
            '(eshell-mode
              calendar-mode
              finder-mode
              info-mode
              dired-mode
              image-mode
              image-dired-thumbnail-mode
              image-dired-display-image-mode
              git-rebase-mode
              help-mode
              sql-interactive-mode
              org-capture-mode))
      (evil-set-initial-state 'term-mode 'emacs)
      (setq evil-emacs-state-cursor  '("red" box))
      (setq evil-normal-state-cursor '("gray" box))
      (setq evil-visual-state-cursor '("gray" box))
      (setq evil-insert-state-cursor '("gray" bar))
      (setq evil-motion-state-cursor '("gray" box))
      (define-key evil-normal-state-map  (kbd "<backspace>") 'projectile-switch-to-buffer)
      (define-key evil-normal-state-map  (kbd "-") 'dired-jump)
      (define-key evil-normal-state-map  (kbd "gb") 'browse-at-remote)
      (define-key evil-normal-state-map  (kbd "gs") 'magit-status)
      (define-key evil-visual-state-map (kbd "v") 'er/expand-region)
      (define-key evil-insert-state-map (kbd "C-e") 'move-end-of-line)
      (define-key evil-insert-state-map (kbd "C-y") 'yank)
      (define-key evil-normal-state-map  (kbd "gt") 'git-timemachine-toggle)
      (define-key key-translation-map (kbd "ESC") (kbd "C-g")))

    (use-package undo-tree
      :init
      (global-undo-tree-mode)
      :diminish undo-tree ""
      :config
      (setq undo-tree-history-directory-alist
            `((".*" . ,temporary-file-directory)))
      (setq undo-tree-auto-save-history t))

    (use-package evil-commentary
      :diminish evil-commentary ""
      :init
      (evil-commentary-mode))

    (use-package evil-visualstar
      :init
      (global-evil-visualstar-mode))

    (use-package evil-matchit
      :init
      (global-evil-matchit-mode))

    (use-package evil-surround
      :init
      (global-evil-surround-mode))

    (use-package evil-multiedit
      :commands (evil-multiedit-match-all
                 evil-multiedit-match-and-next
                 evil-multiedit-match-and-prev
                 evil-multiedit-match-symbol-and-next
                 evil-multiedit-match-symbol-and-prev
                 evil-multiedit-toggle-or-restrict-region
                 evil-multiedit-next
                 evil-multiedit-prev
                 evil-multiedit-abort
                 evil-multiedit-ex-match))
  #+END_SRC

* Which-key
  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :defer 3
      :diminish (which-key-mode)
      :config
      (which-key-mode))
  #+END_SRC

* Rainbow-delimiters
  #+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
      :hook
      (prog-mode . rainbow-delimiters-mode))
  #+END_SRC

* Dump-jump
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :bind (("M-g o" . dumb-jump-go-other-window)
           ("M-g j" . dumb-jump-go)
           ("M-g x" . dumb-jump-go-prefer-external)
           ("M-g z" . dumb-jump-go-prefer-external-other-window))
    :config (setq dumb-jump-selector 'ivy)
    :init
    (dumb-jump-mode))
#+END_SRC

* Hydra
  #+BEGIN_SRC emacs-lisp
    (use-package hydra)
    (use-package use-package-hydra)
  #+END_SRC

* Git
  #+BEGIN_SRC emacs-lisp
    (use-package git-timemachine)

    (use-package magit)

    (use-package git-gutter
      :diminish git-gutter-mode
      :custom
      (git-gutter:modified-sign "~")
      (git-gutter:added-sign    "+")
      (git-gutter:deleted-sign  "-")
      :custom-face
      (git-gutter:modified ((t (:foreground "#f1fa8c" :background "#f1fa8c"))))
      (git-gutter:added    ((t (:foreground "#50fa7b" :background "#50fa7b"))))
      (git-gutter:deleted  ((t (:foreground "#ff79c6" :background "#ff79c6"))))
      :init
      (global-git-gutter-mode)
      :bind
      ("M-g M-g" . hydra-git-gutter/body))

    (defhydra hydra-git-gutter (:body-pre (git-gutter-mode 1)
                                          :hint nil)
      "
        Git gutter:
          _j_: next hunk        _s_tage hunk     _q_uit
          _k_: previous hunk    _r_evert hunk    _Q_uit and deactivate git-gutter
          ^ ^                   _p_opup hunk
          _h_: first hunk
          _l_: last hunk        set start _R_evision
        "
      ("j" git-gutter:next-hunk)
      ("k" git-gutter:previous-hunk)
      ("h" (progn (goto-char (point-min))
                  (git-gutter:next-hunk 1)))
      ("l" (progn (goto-char (point-min))
                  (git-gutter:previous-hunk 1)))
      ("s" git-gutter:stage-hunk)
      ("r" git-gutter:revert-hunk)
      ("p" git-gutter:popup-hunk)
      ("R" git-gutter:set-start-revision)
      ("q" nil :color pink)
      ("Q" (progn (git-gutter-mode -1)
                  (sit-for 0.1)
                  (git-gutter:clear))
       :color pink))

    (use-package github-pullrequest)

    (use-package browse-at-remote)

    (use-package smerge-mode
      :bind ("C-c m" . hydra-smerge/body)
      :init
      (progn
        (defun modi/enable-smerge-maybe ()
          "Auto-enable `smerge-mode' when merge conflict is detected."
          (save-excursion
            (goto-char (point-min))
            (when (re-search-forward "^<<<<<<< " nil :noerror)
              (smerge-mode 1))))
        (add-hook 'find-file-hook #'modi/enable-smerge-maybe :append))
      :config
      (progn
             (defalias 'smerge-keep-upper 'smerge-keep-mine)
             (defalias 'smerge-keep-lower 'smerge-keep-other)
             (defalias 'smerge-diff-base-upper 'smerge-diff-base-mine)
             (defalias 'smerge-diff-upper-lower 'smerge-diff-mine-other)
             (defalias 'smerge-diff-base-lower 'smerge-diff-base-other))

        (defhydra hydra-smerge (:color pink
                                       :hint nil
                                       :pre (smerge-mode 1)
                                       :post (smerge-auto-leave))
          "
    ^Move^       ^Keep^               ^Diff^                 ^Other^
    ^^-----------^^-------------------^^---------------------^^-------
    _n_ext       _b_ase               _<_: upper/base        _C_ombine
    _p_rev       _u_pper              _=_: upper/lower       _r_esolve
    ^^           _l_ower              _>_: base/lower        _k_ill current
    ^^           _a_ll                _R_efine
    ^^           _RET_: current       _E_diff
    "
          ("n" smerge-next)
          ("p" smerge-prev)
          ("b" smerge-keep-base)
          ("u" smerge-keep-upper)
          ("l" smerge-keep-lower)
          ("a" smerge-keep-all)
          ("RET" smerge-keep-current)
          ("\C-m" smerge-keep-current)
          ("<" smerge-diff-base-upper)
          ("=" smerge-diff-upper-lower)
          (">" smerge-diff-base-lower)
          ("R" smerge-refine)
          ("E" smerge-ediff)
          ("C" smerge-combine-with-next)
          ("r" smerge-resolve)
          ("k" smerge-kill-current)
          ("q" nil "cancel" :color pink)))
  #+END_SRC

* Ag
  #+BEGIN_SRC emacs-lisp
    (use-package ag :defer 3)
  #+END_SRC

* Ivy
  #+BEGIN_SRC emacs-lisp
    (use-package counsel
      :demand t
      :diminish ivy-mode counsel-mode
      :straight counsel-projectile
      :straight flx
      :straight smex
      :commands (swiper)
      :bind
      ("M-x" . counsel-M-x)
      ("C-x C-f" . counsel-find-file)
      ("M-y" . counsel-yank-pop)
      ("\C-s" . swiper)
      ("C-x C-r" . ivy-resume)  ;; find-file-read-only (found in global-map)
      ("C-x b" . ivy-switch-buffer)
      :config
      (progn
        (with-eval-after-load 'ido
          (ido-mode -1)
          (ivy-mode)
          (counsel-mode)
          (minibuffer-depth-indicate-mode)
          (counsel-projectile-mode)
          (setq ivy-height 10
                ivy-fixed-height-minibuffer t
                ivy-use-selectable-prompt t
                enable-recursive-minibuffers t
                ivy-re-builders-alist '((t . ivy--regex-fuzzy))
                ivy-count-format "(%d/%d) "
                max-mini-window-height 0.30
                ))))
  #+END_SRC

* Dired
  #+BEGIN_SRC emacs-lisp
    (use-package dired
      :defer 3
      :straight async
      :config
      (put 'dired-find-alternate-file 'disabled nil)
      (require 'dired-x)
      (setq dired-listing-switches "-aBhl --group-directories-first"
            dired-recursive-deletes 'always
            dired-recursive-copies 'always
            dired-dwim-target t
            dired-no-confirm '(copy))
      (dired-async-mode))
  #+END_SRC

* Projectile
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :diminish projectile-mode
      :init
      (projectile-global-mode)
      :bind
      ("M-g a" . hydra-projectile/body)
      ("s-n" . counsel-projectile-switch-project)
      ("s-p" . projectile-find-file)
      ("s-g" . projectile-ag)
      ("s-q" . projectile-replace))

    (defhydra hydra-projectile (:color pink
                                       :columns 4)
      "Projectile"
      ("f"   projectile-find-file                "Find File")
      ("r"   projectile-recentf                  "Recent Files")
      ("z"   projectile-cache-current-file       "Cache Current File")
      ("x"   projectile-remove-known-project     "Remove Known Project")

      ("d"   projectile-find-dir                 "Find Directory")
      ("b"   projectile-switch-to-buffer         "Switch to Buffer")
      ("c"   projectile-invalidate-cache         "Clear Cache")
      ("X"   projectile-cleanup-known-projects   "Cleanup Known Projects")

      ("o"   projectile-multi-occur              "Multi Occur")
      ("s"   projectile-switch-project           "Switch Project")
      ("k"   projectile-kill-buffers             "Kill Buffers")
      ("q"   nil "Cancel" :color pink))
  #+END_SRC

* Expand-region
  #+BEGIN_SRC emacs-lisp
    (use-package expand-region
      :bind ("C-=" . er/expand-region))
  #+END_SRC

* Editorconfig
  #+BEGIN_SRC emacs-lisp
    (use-package editorconfig
      :diminish editorconfig-mode ""
      :init
      (add-hook 'prog-mode-hook (editorconfig-mode 1))
      (add-hook 'text-mode-hook (editorconfig-mode 1)))
  #+END_SRC

* Whitespace
  #+BEGIN_SRC emacs-lisp
    (use-package whitespace
      :init
      (dolist (hook '(prog-mode-hook text-mode-hook))
        (add-hook hook #'whitespace-mode))
      (add-hook 'before-save-hook #'whitespace-cleanup)
      :diminish whitespace ""
      :config
      (setq whitespace-line-column 80) ;; limit line length
      (setq whitespace-style '('tabs tab-mark)))(provide 'theme)

    (defun tf-toggle-show-trailing-whitespace ()
      "Toggle show trailing whitespace between t and nil."
      (interactive)
      (setq show-trailing-whitespace (not show-trailing-whitespace)))
  #+END_SRC

* Completion
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :diminish company-mode
      :defines
      (company-dabbrev-ignore-case company-dabbrev-downcase)
      :hook
      (after-init . global-company-mode)
      :straight company-posframe
      :hook (company-mode . company-posframe-mode)
      :straight company-prescient
      :commands company-prescient-mode
      :hook (company-mode . company-prescient-mode)
      :custom
      (company-idle-delay 0.5)
      (company-show-numbers nil)
      (company-tooltip-limit 10)
      (company-minimum-prefix-length 2)
      (company-tooltip-align-annotations t)
      (company-tooltip-flip-when-above t))
  #+END_SRC

* Flycheck
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :diminish flycheck-mode
      :commands global-flycheck-mode
      :hook (after-init . global-flycheck-mode)
      :config
      (use-package flycheck-pos-tip
        :config
        (setq flycheck-pos-tip-timeout 7
              flycheck-display-errors-delay 0.5)
        (flycheck-pos-tip-mode +1))
      (define-fringe-bitmap 'flycheck-fringe-bitmap-double-arrow
        [0 0 0 0 0 256 384 448 480 496 480 448 384 256 0 0 0 0 0]
        ))
  #+END_SRC

* LSP
  #+BEGIN_SRC emacs-lisp
    (use-package lsp-mode
      :commands lsp
      :config
      (require 'lsp-clients)
      (setq lsp-auto-guess-root t
            lsp-prefer-flymake nil
            lsp-enable-indentation nil
            lsp-enable-on-type-formatting nil))

    (use-package lsp-ui
      :hook ((lsp-mode . lsp-ui-mode)
             (lsp-after-open . (lambda () (lsp-ui-flycheck-enable 1))))
      :config
      (require 'lsp-ui-flycheck)
      (setq lsp-ui-sideline-show-hover nil)
      :bind (:map lsp-ui-mode-map
                  ("C-c r ." . lsp-ui-peek-find-definitions)
                  ("C-c r ?" . lsp-ui-peek-find-references)
                  ("C-c r d" . lsp-ui-peek-find-definitions)
                  ("C-c r r" . lsp-ui-peek-find-references)
                  ("C-c r i" . lsp-ui-imenu)
                  ("C-c r F" . lsp-ui-sideline-apply-code-actions)
                  ("C-c r R" . lsp-rename)))

    (use-package company-lsp
      :commands company-lsp
      :config
      (add-to-list 'company-backends 'company-lsp)
      :custom
      (company-lsp-async t)
      (company-lsp-enable-snippet t))

    (use-package dap-mode
      :after lsp-mode
      :config
      (dap-mode t)
      (dap-ui-mode t))
  #+END_SRC

* Yaml
  #+BEGIN_SRC emacs-lisp
    (use-package yaml-mode
      :defer t
      :mode (".yaml$"))

    (use-package yaml-tomato)
  #+END_SRC

* Nix
  #+BEGIN_SRC emacs-lisp
    (use-package nix-mode
      :defer t
      :mode "\\.nix\\'")
  #+END_SRC

* Vimrc
  #+BEGIN_SRC emacs-lisp
    (use-package vimrc-mode
      :mode ("^\\.vimrc\\'"))
  #+END_SRC

* CSS
  #+BEGIN_SRC emacs-lisp
    (use-package scss-mode
      :defer t
      :mode ("\\.scss\\'")
      :config
      (autoload 'scss-mode "scss-mode")
      (setq scss-compile-at-save 'nil))
  #+END_SRC

* Markdown
  #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode
      :mode ("\\.md$"))

    (use-package markdown-mode+
      :after markdown-mode
      :defer t)

    (use-package polymode
      :straight poly-markdown)
  #+END_SRC

* Node-path
  #+BEGIN_SRC emacs-lisp
    (use-package add-node-modules-path
      :hook ((js2-mode . add-node-modules-path)
             (rjsx-mode . add-node-modules-path)
             (js-mode . add-node-modules-path)))
  #+END_SRC

* Rust
  #+BEGIN_SRC emacs-lisp
    (use-package rust-mode
      :mode "\\.rs\\'"
      :hook (rust-mode . lsp)
      :config
      (require 'lsp-clients)
      (setq rust-format-on-save t)
      (use-package flycheck-rust
        :after flycheck
        :commands flycheck-rust-setup
        :init
        (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)))

    (use-package cargo
      :commands cargo-minor-mode
      :hook (rust-mode . cargo-minor-mode))
  #+END_SRC

* Json
  #+BEGIN_SRC emacs-lisp
    (use-package json-mode
      :mode (("\\.json\\'" . json-mode)
             ("\\.tmpl\\'" . json-mode)
             ("\\.eslintrc\\'" . json-mode)))
  #+END_SRC

* Format-all
  #+BEGIN_SRC emacs-lisp
    (use-package format-all)
  #+END_SRC

* Pdf
  #+BEGIN_SRC emacs-lisp
    (use-package pdf-tools
      :mode ("\\.pdf\\'" . pdf-view-mode)
      :after evil
      :config
      (pdf-tools-install)
      (progn
        (add-to-list 'evil-emacs-state-modes 'pdf-outline-buffer-mode)
        (add-to-list 'evil-emacs-state-modes 'pdf-view-mode))
      (setq-default pdf-view-display-size 'fit-page)
      (setq pdf-annot-activate-created-annotations t)
      (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
      (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))
      (add-hook 'pdf-view-mode-hook (lambda() (display-line-numbers-mode -1)))
      (setq pdf-view-resize-factor 1.1)
      (define-key pdf-view-mode-map (kbd "h") 'pdf-annot-add-highlight-markup-annotation)
      (define-key pdf-view-mode-map (kbd "t") 'pdf-annot-add-text-annotation)
      (define-key pdf-view-mode-map (kbd "D") 'pdf-annot-delete))

    (use-package org-pdfview)
  #+END_SRC

* Ledger
  #+BEGIN_SRC emacs-lisp
    (use-package ledger-mode
      :defer t
      :mode ("\\.ledger$"))

    (use-package flycheck-ledger
      :after (flycheck ledger-mode))
  #+END_SRC

* SSH
  #+BEGIN_SRC emacs-lisp
    (use-package ssh-config-mode
      :mode ("/\\.ssh/config\\'" "/system/ssh\\'" "/sshd?_config\\'" "/known_hosts\\'" "/authorized_keys2?\\'")
      :hook (ssh-config-mode . turn-on-font-lock)

      :config
      (autoload 'ssh-config-mode "ssh-config-mode" t))
  #+END_SRC

* Shell-pop
#+BEGIN_SRC emacs-lisp
  (use-package shell-pop
    :config
    (setq shell-pop-shell-type (quote ("ansi-term" "*ansi-term*" (lambda nil (ansi-term shell-pop-term-shell)))))
    (setq shell-pop-term-shell "/run/current-system/sw/bin/bash")
    ;; need to do this manually or not picked up by `shell-pop'
    (shell-pop--set-shell-type 'shell-pop-shell-type shell-pop-shell-type))
#+END_SRC

* Indent
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :diminish aggressive-indent-mode
    :config
    (global-aggressive-indent-mode)
    (add-to-list 'aggressive-indent-excluded-modes 'org-mode)
    (add-to-list 'aggressive-indent-excluded-modes 'html-mode)
    (add-to-list 'aggressive-indent-excluded-modes 'js-mode)
    (add-to-list 'aggressive-indent-excluded-modes 'sql-mode)
    (add-to-list 'aggressive-indent-excluded-modes 'web-mode))
#+END_SRC

* Logview
  #+BEGIN_SRC emacs-lisp
    (use-package logview
      :mode ("syslog\\(?:\\.[0-9]+\\)" "\\.log\\(?:\\.[0-9]+\\)?\\'"))
  #+END_SRC

* Google-this
#+BEGIN_SRC emacs-lisp
  (use-package google-this)
#+END_SRC

* Theme
  #+BEGIN_SRC emacs-lisp
    (defun single-font-size ()
      "Reset all faces to the height of the default face."
      (dolist (f (face-list))
        (when (not (equal 'default f))
          (set-face-attribute f nil :height 1.0))))

    (set-face-attribute 'default nil
                        :family "DejaVu Sans Mono"
                        :height 110
                        :weight 'normal
                        :width 'normal
                        :underline nil)

    (use-package color-theme-sanityinc-tomorrow
      :demand t
      :config
      (setf custom-safe-themes t)
      (color-theme-sanityinc-tomorrow-night)
      (custom-set-faces
       '(cursor ((t :background "#ffffff")))))

    (setq-default display-line-numbers 'directly
                  display-line-numbers-width 3
                  display-line-numbers-widen t)
    (set-face-attribute 'line-number nil
                        :font "DejaVu Sans Mono-9"
                        :background "#282c34" :foreground "#5c6370")
    (set-face-attribute 'line-number-current-line nil
                        :font "DejaVu Sans Mono-9"
                        :background "#67bcc9" :foreground "#111111")
  #+END_SRC

* Modeline
  #+BEGIN_SRC emacs-lisp
    (use-package spaceline
      :init
      (require 'spaceline-config)
      :config
      (spaceline-spacemacs-theme)
      (spaceline-toggle-buffer-size-off)
      (spaceline-toggle-buffer-id-on)
      (spaceline-toggle-remote-host-on)
      (spaceline-toggle-buffer-position-off)
      (spaceline-toggle-line-column-on)
      (spaceline-toggle-hud-off)
      (spaceline-toggle-projectile-root-on)
      (spaceline-toggle-window-number-on)
      (setq spaceline-window-numbers-unicode t)
      (setq spaceline-workspace-numbers-unicode t))
  #+END_SRC

* Print-time
#+BEGIN_SRC emacs-lisp
(princ (cl-concatenate 'string
                       "Startup completed in "
                       (number-to-string (cadr (time-subtract (current-time)
                                                              em/startup-time)))
                       " seconds\n\n"
                       "Today's date: "
                       (format-time-string "%B %d %Y"))
       (get-buffer-create (current-buffer)))
#+END_SRC
