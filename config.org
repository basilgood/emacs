#+STARTUP: overview
#+TITLE: Emacs
#+LANGUAGE: en
#+OPTIONS: num:nil
#+ATTR_HTML: :style margin-left: auto; margin-right: auto;

* Server start
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook
            (lambda ()
              (require 'server)
              (unless (server-running-p)
                (server-start))))
#+END_SRC
* UI settings
#+BEGIN_SRC emacs-lisp
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC
* Fonts
#+BEGIN_SRC emacs-lisp
  (defun dejavu-font-check (&optional frame)
    (when frame
      (select-frame frame))
    (condition-case nil
        (set-frame-font
         "DejaVuSansMono Nerd Font Mono:style=book")
      (error
       (set-frame-font
        "DejaVu Sans Mono"))))
  (dejavu-font-check)
  (set-face-attribute 'default nil :height 100)
  (add-hook 'after-make-frame-functions 'dejavu-font-check)
#+END_SRC
* Start on scratch
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (setq initial-scratch-message "<3")
#+END_SRC
* Bell
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
* Indentation
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 2)
  (setq tab-width 2)
#+END_SRC
* Scroll
#+BEGIN_SRC emacs-lisp
  (setq scroll-margin 0
        scroll-conservatively 100000
        scroll-preserve-screen-position 1)
#+END_SRC
* Set Unix file coding system
#+BEGIN_SRC emacs-lisp
  (setq-default buffer-file-coding-system 'utf-8-unix)
  (setq-default default-buffer-file-coding-system 'utf-8-unix)
  (set-default-coding-systems 'utf-8-unix)
  (prefer-coding-system 'utf-8-unix)
#+END_SRC
* Warn when opening files bigger than 100MB
#+BEGIN_SRC emacs-lisp
  (setq large-file-warning-threshold 100000000)
#+END_SRC
* Unset C-z
#+BEGIN_SRC emacs-lisp
  (global-unset-key (kbd "C-z"))
#+END_SRC
* Cursorline
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode +1)
#+END_SRC
* Autosave and backup
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC
* Revert buffers
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'global-auto-revert-mode)
  (setq global-auto-revert-non-file-buffers t
        auto-revert-verbose nil)
#+END_SRC
* Wrap lines
#+BEGIN_SRC emacs-lisp
  (setq-default truncate-lines t)
#+END_SRC
* Use hippie-expand instead of dabbrev
#+BEGIN_SRC emacs-lisp
  (setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                           try-expand-dabbrev-all-buffers
                                           try-expand-dabbrev-from-kill
                                           try-complete-file-name-partially
                                           try-complete-file-name
                                           try-expand-all-abbrevs
                                           try-expand-list
                                           try-expand-line
                                           try-complete-lisp-symbol-partially
                                           try-complete-lisp-symbol))
  (global-set-key (kbd "M-/") #'hippie-expand)
#+END_SRC
* Replace buffer-menu with ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") #'ibuffer)
#+END_SRC
* Useful keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "s-<") #'beginning-of-buffer)
  (global-set-key (kbd "s->") #'end-of-buffer)
#+END_SRC
* y/n
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* Newline at end of file
#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC
* Delete the selection with a keypress
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode t)
#+END_SRC
* Theme
** onedark
#+BEGIN_SRC emacs-lisp
  ;; (use-package atom-one-dark-theme
  ;;   :ensure t
  ;;   :config
  ;;   (load-theme 'atom-one-dark t))
#+END_SRC

** spacemacs
#+BEGIN_SRC emacs-lisp
  (use-package spacemacs-theme
    :ensure spacemacs-theme
    :defer t
    :init (load-theme 'spacemacs-dark t))
#+END_SRC
* Numbers, cursor
#+BEGIN_SRC emacs-lisp
  (global-linum-mode 1)
  (blink-cursor-mode -1)
  (setq make-pointer-invisible t)
  (setq-default cursor-type '(bar . 2))
  (set-cursor-color "green")
#+END_SRC
* Diminish
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :defer t
    :init
    (diminish 'which-key-mode)
    (diminish 'linum-relative-mode)
    (diminish 'hungry-delete-mode)
    (diminish 'visual-line-mode)
    (diminish 'subword-mode)
    (diminish 'beacon-mode)
    (diminish 'irony-mode)
    (diminish 'page-break-lines-mode)
    (diminish 'auto-revert-mode)
    (diminish 'rainbow-delimiters-mode)
    (diminish 'rainbow-mode))
#+END_SRC
* Which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :defer t
    :init
    (which-key-mode +1))
#+END_SRC
* Switch between visible buffers
#+BEGIN_SRC emacs-lisp
  (use-package windmove
    :config
    (windmove-default-keybindings))
#+END_SRC
* Key chords
#+BEGIN_SRC emacs-lisp
  (use-package use-package-chords
    :ensure t
    :init
    (key-chord-mode 1))
#+END_SRC
* Org mode
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis " ")
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
  (add-hook 'org-mode-hook 'org-indent-mode)

  (use-package htmlize
    :ensure t
    )

  (add-hook 'org-mode-hook
            '(lambda ()
               (visual-line-mode 1)))
  (global-set-key (kbd "C-c '") 'org-edit-src-code)
  (use-package org-bullets
    :ensure t
    :defer t
    :init
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
* Windows move
#+BEGIN_SRC emacs-lisp
  (use-package windmove
    :config
    (windmove-default-keybindings))
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
* Go to
#+BEGIN_SRC emacs-lisp
  (use-package ace-jump-mode
    :bind ("s-." . ace-jump-char-mode))
#+END_SRC
* Dired
#+BEGIN_SRC emacs-lisp
  (use-package dired-k
    :ensure t
    :defer 1
    :init
    (progn
      (add-hook 'dired-initial-position-hook 'dired-k))
    (put 'dired-find-alternate-file 'disabled nil)
    (setq dired-recursive-deletes 'always)
    (setq dired-recursive-copies 'always)
    (setq dired-dwim-target t)
    (require 'dired-x))
  (bind-keys
   :map dired-mode-map
   ("g" . dired-k))
#+END_SRC
* Helm and projectile
#+BEGIN_SRC emacs-lisp
  (use-package ag
    :ensure t
    :commands (ag ag-regexp ag-project))

  (use-package helm
    :ensure t
    :diminish "HM"
    :bind
    ("C-x C-f" . 'helm-find-files)
    ("C-x b" . 'helm-buffers-list)
    ("M-x" . 'helm-M-x)
    ("M-y" . helm-show-kill-ring)
    ("C-x b" . helm-buffers-list)
    :config
    (setq helm-autoresize-max-height 0
          helm-autoresize-min-height 30
          helm-M-x-fuzzy-match t
          helm-buffers-fuzzy-matching t
          helm-recentf-fuzzy-match t
          helm-semantic-fuzzy-match t
          helm-imenu-fuzzy-match t
          helm-split-window-in-side-p nil
          helm-move-to-line-cycle-in-source nil
          helm-ff-search-library-in-sexp t
          helm-scroll-amount 8
          helm-echo-input-in-header-line t)
    :init
    (helm-mode 1))

  (require 'helm-config)
  (helm-autoresize-mode 1)
  (define-key helm-find-files-map (kbd "C-b") 'helm-find-files-up-one-level)
  (define-key helm-find-files-map (kbd "C-f") 'helm-execute-persistent-action)

  (use-package helm-swoop
    :ensure t
    :bind (("M-m" . helm-swoop)
           ("M-M" . helm-swoop-back-to-last-point))
    :init
    (bind-key "M-m" 'helm-swoop-from-isearch isearch-mode-map))

  (use-package helm-ag
    :ensure helm-ag
    :bind ("M-p" . helm-projectile-ag)
    :commands (helm-ag helm-projectile-ag)
    :init (setq helm-ag-insert-at-point 'symbol
                helm-ag-command-option "--path-to-ignore ~/.agignore"))

  (use-package projectile
    :ensure t
    :diminish "PJ"
    :init
    (setq projectile-completion-system 'helm)
    :config
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (projectile-mode +1))

  (use-package helm-projectile
    :ensure t
    :bind ("M-t" . helm-projectile-find-file)
    :config
    (helm-projectile-on))
#+END_SRC
* Terminal
#+BEGIN_SRC emacs-lisp
  (use-package multi-term
    :ensure t
    :defer 5
    :init
    (global-set-key (kbd "C-x C-m") 'multi-term)
    (global-set-key (kbd "C-x m") 'multi-term-next))
#+END_SRC
* Neotree and ztree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :defer 1
    :init
    (setq neo-smart-open t)
    (setq projectile-switch-project-action 'neotree-projectile-action)
    (setq neo-window-fixed-size nil)
    (setq neo-vc-integration '(face char))
    (setq neo-show-hidden-files t)
    (setq neo-toggle-window-keep-p t)
    (setq neo-force-change-root t)
    :bind ("s-/" . neotree-toggle))

  (use-package ztree
    :ensure t
    :defer t
    :chords
    ("zz" . ztree-dir))
#+END_SRC
* Search and replace
#+BEGIN_SRC emacs-lisp
  (use-package anzu
    :ensure t
    :diminish anzu-mode
    :bind
    (([remap query-replace] . anzu-query-replace)
     ([remap query-replace-regexp] . anzu-query-replace-regexp)
     :map isearch-mode-map
     ([remap isearch-query-replace] . anzu-isearch-query-replace)
     ([remap isearch-query-replace-regexp] . anzu-isearch-query-replace-regexp))
    :init
    (global-anzu-mode 1)
    :config
    (setq anzu-cons-mode-line-p nil))
  (defadvice
      isearch-forward
      (after isearch-forward-recenter activate)
    (recenter))
  (ad-activate 'isearch-forward)

  (defadvice
      isearch-repeat-forward
      (after isearch-repeat-forward-recenter activate)
    (recenter))
  (ad-activate 'isearch-repeat-forward)

  (defadvice
      isearch-repeat-backward
      (after isearch-repeat-backward-recenter activate)
    (recenter))
  (ad-activate 'isearch-repeat-backward)
#+END_SRC
* Git
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)))

  (use-package git-timemachine
    :ensure t
    :bind (("s-g" . git-timemachine)))

  (use-package diff-hl
    :ensure t
    :defer 10
    :init
    (global-diff-hl-mode +1)
    (add-hook 'dired-mode-hook 'diff-hl-dired-mode)
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh))
#+END_SRC
* Convert Emacs syntax to PCRE
#+BEGIN_SRC emacs-lisp
  (use-package pcre2el
    :ensure t
    :diminish pcre-mode
    :config
    (pcre-mode))
#+END_SRC
* Expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region))
#+END_SRC
* Remember your location in a file when saving files
#+BEGIN_SRC emacs-lisp
  (use-package saveplace
    :ensure t
    :config
    (save-place-mode 1))
#+END_SRC
* Parens
#+BEGIN_SRC emacs-lisp
  (use-package paren
    :config
    (show-paren-mode +1))
  (setq jump-char-lazy-highlight-face nil)
  ;; (global-set-key (kbd "M-[") 'insert-pair)
  ;; (global-set-key (kbd "M-{") 'insert-pair)
  ;; (global-set-key (kbd "M-\"") 'insert-pair)
  ;; (global-set-key (kbd "M-\'") 'insert-pair)
#+END_SRC
* Temporary highlight changes
#+BEGIN_SRC emacs-lisp
  (use-package volatile-highlights
    :ensure t
    :defer 2
    :config
    (volatile-highlights-mode +1))
#+END_SRC
* Mark multiple
#+BEGIN_SRC emacs-lisp
  (use-package ace-mc
    :ensure t
    :bind ("M-." . ace-mc-add-multiple-cursors)
    ("M-," . ace-mc-add-single-cursor))

  (use-package iedit
    :ensure t
    :bind ("*" . iedit-mode))
  (add-hook 'iedit-mode-hook (lambda () (diff-hl-mode -1)))
  (add-hook 'iedit-mode-end-hook (lambda () (diff-hl-mode +1)))
#+END_SRC
* Uniquify
#+BEGIN_SRC emacs-lisp
  (use-package uniquify
    :config
    (setq uniquify-buffer-name-style 'forward)
    (setq uniquify-separator "/")
    (setq uniquify-after-kill-buffer-p t)
    (setq uniquify-ignore-buffers-re "^\\*"))
#+END_SRC
* Savehist
#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :config
    (setq savehist-additional-variables
          '(search-ring regexp-search-ring)
          savehist-autosave-interval 60)
    (savehist-mode +1))
#+END_SRC
* Recentf
#+BEGIN_SRC emacs-lisp
  (use-package recentf
    :config
    (setq recentf-max-saved-items 500
          recentf-max-menu-items 15
          recentf-auto-cleanup 'never)
    (recentf-mode +1))
#+END_SRC
* Undo tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :defer 5
    :diminish undo-tree-mode
    :init
    (undo-tree-mode +1)
    :chords
    (("uu" . undo-tree-visualize)))
#+END_SRC
* Jump to source
#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :ensure t
    :diminish dumb-jump-mode
    :bind (("C-M-g" . dumb-jump-go)
           ("C-M-p" . dumb-jump-back)
           ("C-M-q" . dumb-jump-quick-look)))
#+END_SRC
* Useful extensions
#+BEGIN_SRC emacs-lisp
  (use-package crux
    :ensure t
    :bind (("C-c o" . crux-open-with)
           ("M-o" . crux-smart-open-line)
           ("s-o" . crux-smart-open-line-above)
           ("C-c n" . crux-cleanup-buffer-or-region)
           ("C-c f" . crux-recentf-find-file)
           ("C-M-z" . crux-indent-defun)
           ("C-c u" . crux-view-url)
           ("C-c e" . crux-eval-and-replace)
           ("C-c w" . crux-swap-windows)
           ("C-c D" . crux-delete-file-and-buffer)
           ("C-c r" . crux-rename-buffer-and-file)
           ("C-c t" . crux-visit-term-buffer)
           ("C-c k" . crux-kill-other-buffers)
           ("C-c TAB" . crux-indent-rigidly-and-copy-to-clipboard)
           ("C-c I" . crux-find-user-init-file)
           ("C-c S" . crux-find-shell-init-file)
           ("s-r" . crux-recentf-find-file)
           ("s-j" . crux-top-join-line)
           ("C-^" . crux-top-join-line)
           ("s-k" . crux-kill-whole-line)
           ("C-S-d" . crux-duplicate-current-line-or-region)
           ([remap move-beginning-of-line] . crux-move-beginning-of-line)
           ([(shift return)] . crux-smart-open-line)
           ([(control shift return)] . crux-smart-open-line-above)
           ([remap kill-whole-line] . crux-kill-whole-line)
           ("C-c s" . crux-ispell-word-then-abbrev)))
#+END_SRC
* God mode
#+BEGIN_SRC emacs-lisp
  (use-package god-mode
    :ensure t
    :defer 1
    :bind ("C-z" . god-local-mode))
#+END_SRC
* Yaml mode
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode ("\\.ya?ml\\'" . yaml-mode))
#+END_SRC
* Markdown mode
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode (("\\.md\\'" . gfm-mode)
           ("\\.markdown\\'" . gfm-mode))
    :config
    (setq markdown-fontify-code-blocks-natively t))
#+END_SRC
* Php mode
#+BEGIN_SRC emacs-lisp
  (use-package php-mode
    :ensure t
    :config
    (progn
      (setq-default php-mode-coding-style 'psr2)))
#+END_SRC
* Scss mode
#+BEGIN_SRC emacs-lisp
  (use-package scss-mode
    :ensure t
    :config
    (progn
      (setq-default scss-compile-at-save nil)))
#+END_SRC
* Web mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode "\\.twig$"
    :mode "\\.html$"
    :mode "\\.js$")
#+END_SRC
* Editor config
#+BEGIN_SRC emacs-lisp
  (use-package editorconfig
    :ensure t
    :diminish "EC"
    :config
    (editorconfig-mode 1))
#+END_SRC
* Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :diminish "FC"
    :config
    (add-hook 'after-init-hook #'global-flycheck-mode))
#+END_SRC
* Modeline
** A small trim of the original
#+BEGIN_SRC emacs-lisp
  ;; (setq-default mode-line-format '("%e"
  ;;                                  mode-line-front-space
  ;;                                  " "
  ;;                                  mode-line-modified
  ;;                                  " "
  ;;                                  "%[" mode-line-buffer-identification "%]"
  ;;                                  "   "
  ;;                                  "L%l"
  ;;                                  "  "
  ;;                                  "C%c"
  ;;                                  "   "
  ;;                                  mode-line-modes
  ;;                                  mode-line-misc-info
  ;;                                  projectile-mode-line
  ;;                                  " "
  ;;                                  (vc-mode vc-mode)
  ;;                                  mode-line-end-spaces))
#+END_SRC
** Load Tarsius' minions
#+BEGIN_SRC emacs-lisp
  ;; (use-package minions
  ;;   :ensure t
  ;;   :config (minions-mode 1))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (use-package powerline
    :ensure t
    :init
    (powerline-center-theme))
  (add-hook 'after-init-hook 'powerline-reset)
#+END_SRC
